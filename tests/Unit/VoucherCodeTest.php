<?php

namespace Tests\Unit;

use App\Recipient;
use App\SpecialOffer;
use App\VoucherCode;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class VoucherCodeTest extends TestCase
{
    use DatabaseTransactions;
    protected $voucher_code;
    protected $recipient;
    protected $special_offer;


    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->recipient = Recipient::create(['name'=> "Kingsley Udenewu", 'email'=>"kingsley.udenewu@hotmail.com"]);;
        $this->special_offer = SpecialOffer::create(['name'=> "Black Friday", 'discount'=>45, 'expiration'=>\Carbon\Carbon::tomorrow()]);
        $this->voucher_code = VoucherCode::create(['code'=>str_random(10), 'special_offer_id'=>$this->special_offer->id, 'recipient_id'=>$this->recipient->id]);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this->assertTrue(true);
    }

    /**
     * This test the API through a get request to fetch all the voucher code that
     * belongs to a particular recipient
     *
     * @return void
     *
     */
    public function testVoucherCodeFromApiToGetAllVouchersOfARecipient(){
        //Please before running this test ensure to copy the email of a recipient from the database to test
        $response = $this->json('POST', '/api/v1/vouchers/email', ['email' => $this->recipient->email]);
        $response->assertStatus(200);
    }

    /**
     * This test the API through a post request to fetch the discount of a valid voucher
     *
     * @return void
     */
    public function testVoucherCodeFromApiThroughPostRequest(){
        $response = $this->json('POST', '/api/v1/voucher', ['code'=>$this->voucher_code->code, 'email' => $this->recipient->email]);
        $response->assertStatus(200);
    }

    /**
     * This test the API through a get request to return 400
     * Because we are testing with an invalid email format
     *
     * @return void
     */
    public function testInvalidEmailFromApiThroughPostRequest(){
        $response = $this->json('POST', route('voucher.email'), ['email' => 'bggg']);
        $response->assertStatus(400);
    }

    /**
     * This test the API through a get request to return 400
     * Because we are testing with an invalid email format
     *
     * @return void
     */
    public function testInvalidCodeFromApiThroughPostRequest(){
        $response = $this->json('POST', '/api/v1/voucher', ['code'=>'656hghhh', 'email' => $this->recipient->email]);
        $response->assertStatus(400);
    }
}
