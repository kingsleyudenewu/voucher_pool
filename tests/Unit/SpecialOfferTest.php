<?php

namespace Tests\Unit;

use App\SpecialOffer;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class SpecialOfferTest extends TestCase
{
    use DatabaseTransactions;
    protected $special_offer;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->special_offer = factory(SpecialOffer::class)->create();

    }

    /**
     * This test for successful creation of special offers provided no error occurs
     *
     * @return void
     *
     */
    public function testIfWeCanCreateSpecialOffer(){
        $response = $this->post('/special_offers', ['name'=>$this->special_offer->name, 'discount' => $this->special_offer->discount, 'expiration' =>$this->special_offer->expiration]);

        // Redirects after creating the Special Offer
        $response->assertStatus(302);
        $response->assertRedirect(route('index'));
    }

    /**
     * This test returns an error on the discount about being between the range from 1 - 99
     *
     * @return void
     *
     */
    public function testSpecialOffersWithInvalidDiscount(){
        $response = $this->post('/special_offers', ['name'=>$this->special_offer->name, 'discount' => 101, 'expiration' =>$this->special_offer->expiration]);
        $response->assertSessionHasErrors(['discount']);
    }

    /**
     * This test the special offers through a post request
     * It also return an error of using a dtring value instead of numeric value for the discount
     *
     * @return void
     *
     */
    public function testSpecialOffersWithInvalidDiscountAsAString(){
        $response = $this->post('/special_offers', ['name'=>$this->special_offer->name, 'discount' => 'asdfjdf', 'expiration' => $this->special_offer->expiration]);
        $response->assertSessionHasErrors(['discount']);
    }

    /**
     * This test the special offer if the user enters a date that has passed
     *
     * @return void
     *
     */
    public function testSpecialOffersWithInvalidDateFormat(){
        $response = $this->post('/special_offers', ['name'=>$this->special_offer->name, 'discount' => $this->special_offer->discount, 'expiration' =>'2018-07-20']);
        $response->assertSessionHasErrors(['expiration']);
    }

    /**
     * This test the name of the special offer if its a string
     *
     * @return void
     *
     */
    public function testIfNameIsNotAString(){
        $response = $this->post('/special_offers', ['name'=>12345, 'discount' => $this->special_offer->discount, 'expiration' =>$this->special_offer->expiration]);
        $response->assertSessionHasErrors(['name']);
    }
}
